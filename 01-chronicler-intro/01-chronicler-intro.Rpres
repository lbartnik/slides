Which lessons history doesn't teach
========================================================
author: Lukasz A. Bartnik
date: 2018-10-10
autosize: true
css: adjust-code-size.css


Meet Joe.
========================================================
![Lego Joe](lego-scientist.jpg)

Meet Joe. Joe makes sense of data.
========================================================
![Lego Joe](lego-scientist.jpg)
![Lego Joe](lego-pile.jpg)

Meet Joe. Joe makes sense of data. It's messy.
========================================================
![Lego Joe](lego-scientist.jpg)
![Lego Joe](lego-pile.jpg)
![Lego Joe](lego-random-1.png)
![Lego Joe](lego-random-2.jpg)


Why exactly is it messy?
========================================================

* Lots of learning about the data, lots of insights
* Testing and developing multiple ideas
* Lots of back-and-forth between refining and trying out new things 
* Lots of code, scripts, plots, data files, model objects
* ...and you have to keep track of all of that!


So, what can we do?
========================================================
Power to the People!
* Software engineering suggests: architect your code carefully,
  write tests, use code versioning
* Data engineering adds: make your research reproducible:
  RMarkdown, Jupyter notebooks, etc.
* https://github.com/alexiscarter/BIOME/blob/master/Day3_AM/Lecture7_Reproducibility.pdf


Some things might still go missing
========================================================
* Writing RMarkdown slows things down, why not experiment
  first and document later?
* Or what if we documented the wrong thing? Re-creating
  that model or plot will take so long...
* Or?...


Full history of R session(s)
========================================================

  * extend the standard R history
  * keep track of every command, R object, plot, etc.
  * code: expressions and functions
  * lineage - match artifacts with their parents


Plain R history
========================================================
left: 60%

Commands

```{r eval=FALSE}
input <- read_csv("london_meters.csv")
input # print on the console

plot(input$time, input$kWh)

m <- lm(kWh ~ dow(time) + hour(time), input)
summary(m)

input %<>% mutate(value = kWh/sd(kWh))
m <- lm(value ~ dow(time) + hour(time), input)
```

_stored in history_


***

Objects in R session

```
input


input

input m


input m
input m
```

_stored in... globalenv? .RData?_


R history + repository of artifacts
========================================================

Commands

```{r eval=FALSE}
input <- read_csv("london_meters.csv")
input # print on the console

plot(input$time, input$kWh)

m <- lm(kWh ~ dow(time) + hour(time), input)
summary(m)

input %<>% mutate(value = kWh/sd(kWh))
m <- lm(value ~ dow(time) + hour(time), input)
```

_stored in repository of artifacts_


***

Artifacts

```
input


input <plot>

input m <plot>


input input m <plot>
input input m m <plot>
```

_stored in repository of artifacts_



Browser
========================================================

![RStudio with Artifact Browser, a screenshort](artifact-browser.png)



Example | browse artifacts
========================================================

Zoom in:

```{original}
↳ all elements 
    ↳ input data.frame[2785, 3]
        ↳ <plot> 
        ↳ input data.frame[2785, 4]
           ↳ m lm adjR2:0.24 AIC:7129 df:3
        ↳ m lm adjR2:0.24 AIC:3055 df:3
```



Useful? Is it even useful?
========================================================

Use case: find the artifact matching a file in my project directory.

  * show the artifact itself
  * show its origin - the full lineage
  * make it reproducible


Match file with artifact
========================================================

```{r browse,eval=FALSE,class.source='original'}
a <- identify('hourly_22_48/take_5.png')
a
#> artifact fb132bca
#> with(data, plot(TPR, FPR))

browse('fb132bca')
browse_Rmd('fb132bca')
```

